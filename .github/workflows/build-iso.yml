name: Build üèóÔ∏è ISO üìÄ
on:
  push:
    branches:
      - main
    paths:
      - 'flake.lock'

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true
permissions:
  contents: write
  id-token: write

jobs:
  build-iso:
    name: Build ISO üíøÔ∏è
    runs-on: ubuntu-latest
    outputs:
      ver: ${{ steps.build-iso.outputs.ver }}
    steps:
    - uses: actions/checkout@v4
    - uses: wimpysworld/nothing-but-nix@main
    - uses: DeterminateSystems/determinate-nix-action@v3
      with:
        extra-conf: |
          lazy-trees = true
    - uses: DeterminateSystems/flakehub-cache-action@v1
    - name: Nix Build Ô∏è‚ùÑÔ∏è
      id: build-iso
      run: |
        nix build .#nixosConfigurations.iso-console.config.system.build.isoImage -L
        mkdir iso || true
        ISO=$(head -n1 result/nix-support/hydra-build-products | cut -d'/' -f6)
        # Make semver compatible
        VER=$(head -n1 result/nix-support/hydra-build-products | cut -d'-' -f4 | cut -d'.' -f1-3 | sed -E 's/\b0+([1-9])/\1/g')
        # Set output variable
        echo "ver=v${VER}" >> $GITHUB_OUTPUT
        sudo mv "result/iso/${ISO}" iso/console-${ISO}
        sha256sum "iso/console-${ISO}" > "iso/console-${ISO}.sha256"
        sed -i -r "s/ .*\/(.+)/  \1/g" "iso/console-${ISO}.sha256"
        sudo df -h
    - name: sbomnix
      run: |
        name="${{ github.job }}-${{ matrix.package }}"
        nix run github:tiiuae/sbomnix#sbomnix -- \
          --csv "${name}.sbom.csv" \
          --cdx "${name}.sbom.cdx.json" \
          --spdx "${name}.sbom.spdx.json" \
          ./result
    - name: vulnxscan
      run: |
        name="Console-ISO"
        nix run github:tiiuae/sbomnix#vulnxscan -- \
          --triage \
          --sbom "${name}.sbom.cdx.json"
        if [ -e vulns.triage.csv ]; then
          grep -v -E "not_vulnerable|fix_not_available" vulns.triage.csv > cve.csv
          if [ $(wc -l < cve.csv) -gt 1 ]; then
            nix run github:nixos/nixpkgs#csv2md -- --columns "0-7,9" cve.csv | tee "${name}.vulnxscan.md"
            echo "### Vulnerability Scan Results for ${name}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat "${name}.vulnxscan.md" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        fi
    - name: Release ISO üéÅ
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ISO=$(head -n1 result/nix-support/hydra-build-products | cut -d'/' -f6)
        if [ -f "iso/console-${ISO}" ]; then
          gh release create "${{ steps.build-iso.outputs.ver }}" --draft=false --generate-notes
          for artefact in "iso/"*; do
            gh release upload "${{ steps.build-iso.outputs.ver }}" "${artefact}" --clobber
          done
        else
          echo "No ISO found, failing the job"
          exit 1
        fi

  publish-flakehub:
    needs: [build-iso]
    name: Publish FlakeHub ‚ùÑÔ∏è
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
    - uses: actions/checkout@v4
    - uses: wimpysworld/nothing-but-nix@main
    - uses: DeterminateSystems/determinate-nix-action@v3
    - uses: DeterminateSystems/flakehub-cache-action@v1
    - uses: DeterminateSystems/flakehub-push@v5
      with:
        tag: ${{ needs.build-iso.outputs.ver }}
        include-output-paths: true
        visibility: public